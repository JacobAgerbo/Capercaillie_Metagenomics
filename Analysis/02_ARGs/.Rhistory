ARGs.class4,ARGs.class5,ARGs.class6,
ARGs.class7,ARGs.class8)
ARGs <- ARGs[!duplicated(ARGs$ARG.ARO.Term), ]
# Select first size of ARG allele as proxy for gene length
ARGs <- ARGs %>% tidyr::separate(ARG.Reference.Length, into = "Length", sep = ";", fill = "right")
library(“VennDiagram”)
library(VennDiagram)
library("VennDiagram")
install.packages("VennDiagram")
library(VennDiagram)
install.packages("ggvenn")
library(ggvenn)
knitr::opts_chunk$set(echo = TRUE)
library(ggfortify)
library(ggplot2)
library(readr)
library(readxl)
library(dplyr)
library(RColorBrewer)
library(wesanderson)
library(vegan)
library(ggpubr)
library(factoextra)
library(cluster)
library(cowplot)
library(ggdendro)
library(dendextend)
library(tidyverse)
library(ComplexHeatmap)
library(vegan)
library(tidyverse)
library(matrixStats)
library(ADImpute)
library(cluster)
library(VennDiagram)
library(ggvenn)
# one with all sample names, by scanning our "samples" file we made earlier
path <- "."
# one holding the file names of all the forward reads
sample <- sort(list.files(path, pattern=".gene_mapping_data.txt", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(sample), ".gene_mapping_data.txt"), `[`, 1)
## Colors
set.seed(1) # This makes the plot appear the same each time it is run
n <- 100
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
md <- read_excel("metadata.xlsx")
df.list = lapply(sample, function(i){
x = read.delim(i, header = T)
x = x[,c(1,12)]
x
})
names(df.list) <- sample.names
#merge all ARG results into one file
ARG_all.x <- merge(df.list[[1]], df.list[[2]], by="ARO.Term", all = T)
colnames(ARG_all.x) <- c("ARO.Term",sample.names[1:2])
ARG_all.y <- merge(ARG_all.x, df.list[[3]], by="ARO.Term", all = T)
colnames(ARG_all.y) <- c("ARO.Term",sample.names[1:3])
ARG_all.x <- merge(ARG_all.y, df.list[[4]], by="ARO.Term", all = T)
colnames(ARG_all.x) <- c("ARO.Term",sample.names[1:4])
ARG_all.y <- merge(ARG_all.x,  df.list[[5]], by="ARO.Term", all = T)
colnames(ARG_all.y) <- c("ARO.Term",sample.names[1:5])
ARG_all.x <- merge(ARG_all.y, df.list[[6]], by="ARO.Term", all = T)
colnames(ARG_all.x) <- c("ARO.Term",sample.names[1:6])
ARG_all.y <- merge(ARG_all.x, df.list[[7]], by="ARO.Term", all = T)
colnames(ARG_all.y) <- c("ARO.Term",sample.names[1:7])
ARG_all.x <- merge(ARG_all.y, df.list[[8]], by="ARO.Term", all = T)
colnames(ARG_all.x) <- c("ARO.Term",sample.names[1:8])
ARG.INFO = lapply(sample, function(i){
x = read.delim(i, header = T)
x
})
names(ARG.INFO) <- sample.names
ARGs.class1 <- data.frame("ARG" = ARG.INFO[[1]][,c(1,7,8,23,24,25,26)])
ARGs.class2 <- data.frame("ARG" = ARG.INFO[[2]][,c(1,7,8,23,24,25,26)])
ARGs.class3 <- data.frame("ARG" = ARG.INFO[[3]][,c(1,7,8,23,24,25,26)])
ARGs.class4 <- data.frame("ARG" = ARG.INFO[[4]][,c(1,7,8,23,24,25,26)])
ARGs.class5 <- data.frame("ARG" = ARG.INFO[[5]][,c(1,7,8,23,24,25,26)])
ARGs.class6 <- data.frame("ARG" = ARG.INFO[[6]][,c(1,7,8,23,24,25,26)])
ARGs.class7 <- data.frame("ARG" = ARG.INFO[[7]][,c(1,7,8,23,24,25,26)])
ARGs.class8 <- data.frame("ARG" = ARG.INFO[[8]][,c(1,7,8,23,24,25,26)])
ARGs <- rbind(ARGs.class1,ARGs.class2,ARGs.class3,
ARGs.class4,ARGs.class5,ARGs.class6,
ARGs.class7,ARGs.class8)
ARGs <- ARGs[!duplicated(ARGs$ARG.ARO.Term), ]
# Select first size of ARG allele as proxy for gene length
ARGs <- ARGs %>% tidyr::separate(ARG.Reference.Length, into = "Length", sep = ";", fill = "right")
df <- ARG_all.x
rownames(df) <- df$ARO.Term
df <- df[,-c(1)]
df[is.na(df)] <- 0 # make NAs to zero, since that is what is in this case.
ARGs <- ARGs[match(rownames(df), ARGs$ARG.ARO.Term),]
size <- data.frame(ARG = ARGs$ARG.ARO.Term, Length = ARGs$Length)
colnames(size) <- c("hgnc_symbol", "transcript_length")
df.tmp <- NormalizeTPM(df, tr_length = size, scale = 1e+06) # the scale is just a constant, which can be changed, i added a million, so the total sum for each sample i 1.
colSums(df.tmp) # check Sample
ARGs.tmp <- df.tmp
# filter low variant OTUs out
#  First find the desired quantile breaks for the entire matrix
qt <- quantile(df.tmp , probs = c(0.10,0.90) )
#Taking out OTUs fall outside the qt breaks
rows <- apply( df.tmp , 1 , function(x) any( x < qt[1] | x > qt[2] ) )
#And subsetting on this vector
df.tmp.filtered <- df.tmp[ rows , ]
ARG.filtered <- ARGs[match(rownames(df.tmp.filtered), ARGs$ARG.ARO.Term),]
ARG.filtered <- ARG.filtered %>% tidyr::separate(ARG.Drug.Class, into = "Class", sep = ";", fill = "right")
col_fun = circlize::colorRamp2(c(0, 0.001, 0.25,0.5,0.75), c("#0c336b","#db3030","#f57914", "#affabf", "#08a377"))
# Make colour codes for HA
ha_right_col <- list("Class" = setNames(col_vector[1:22], unique(ARG.filtered$Class)),
"Plasmid" = c("YES" = "Black", "NO" = "White", "no data" = "grey80"),
"Bacteria" = c("YES" = "Black", "NO" = "White", "no data" = "grey80"))
#
ha_mix_right = HeatmapAnnotation(Class = ARG.filtered$Class,
Plasmid = ARG.filtered$ARG.Resistomes...Variants..Observed.in.Plasmid.s.,
Bacteria = ARG.filtered$ARG.Resistomes...Variants..Observed.in.Genome.s.,
which = "row", width = unit(1.5, "cm"), col = ha_right_col)
top_col = list("Life_Style" = c("Wild" = "#2c7843", "Captive" = "#e63c3c"))
ha <- HeatmapAnnotation(
Life_Style = md$Wild_OR_Captive,
col = top_col
)
#pdf("ARG_Occurence.pdf", height = 10, width = 15)
Heatmap(df.tmp.filtered,
top_annotation = ha,
col = col_fun) + ha_mix_right
#dev.off()
library(hilldiv)
vOTUs <- read.csv("../../01_VIROME/raw_vOTU_table.txt", sep = "\t", row.names = 1)
View(ARGs)
View(ARGs.tmp)
ARG.venn <- ARGs.tmp
ARG.venn[ARG.venn>0] <- 1
View(ARG.venn)
# use list as input
D <-list('Wild'=ARG.venn[,1:7],'Captive'=ARG.venn[,8])
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Autumn","Spring"),show_percentage=FALSE,
fill_color=c("red","orange"))
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Wild","Captive"),show_percentage=FALSE,
fill_color=c("red","orange"))
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
ARG.venn <- ARGs.tmp
ARG.venn[ARG.venn>0] <- 1
# use list as input
D <-list('Wild'=ARG.venn[,1:7],'Captive'=ARG.venn[,8])
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
ARG.venn <- ARGs.tmp
ARG.venn[ARG.venn>0] <- 1
# use list as input
D <-list('Wild'=ARG.venn[,1:7],'Captive'=ARG.venn[,8])
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
ARG.venn <- ARGs.tmp
ARG.venn[ARG.venn>0] <- 1
# use list as input
D <-list('Wild'=ARG.venn[,1:7],'Captive'=ARG.venn[,8])
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
ARG.venn <- ARGs.tmp
ARG.venn[ARG.venn>0] <- 1
# use list as input
D <-list('Wild'=ARG.venn[,1:7],'Captive'=ARG.venn[,8])
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
View(D)
D[["Captive"]]
Wild.venn <- ARG.venn[,1:7]
Wild.venn <- rowSums(ARG.venn[,1:7])
Wild.venn[Wild.venn>0] <- 1
# use list as input
D <-list('Wild'=Wild.venn,'Captive'=ARG.venn[,8])
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(D,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
View(D)
library(UpSetR)
install.packages("UpSetR")
library(UpSetR)
upset(fromList(D), order.by = "freq")
Venn.data <- data.frame("Wild" <- rowSums(ARGs.tmp[,1:7]),
"Captive" <- rowSums(ARGs.tmp[,8]))
Venn.data <- data.frame("Wild" <- rowSums(ARGs.tmp[,1:7]),
"Captive" <- ARGs.tmp[,8])
Venn.data[Venn.data>0] <- 1
View(Venn.data)
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(Venn.data,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
upset(Venn.data, order.by = "freq")
View(Venn.data)
Venn.data <- data.frame(Wild <- rowSums(ARGs.tmp[,1:7]),
"Captive" <- ARGs.tmp[,8])
View(Venn.data)
Venn.data <- data.frame(rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data <- data.frame(rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("Wild","Captive")
Venn.data[Venn.data>0] <- 1
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(Venn.data,c("Wild","Captive"),show_percentage=TRUE,
fill_color=c("red","orange"))
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(Venn.data,c("Wild","Captive"),
fill_color=c("red","orange"))
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(Venn.data,c("Wild","Captive"),show_percentage=FALSE,
fill_color=c("red","orange"))
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(Venn.data,show_percentage=FALSE,
fill_color=c("red","orange"))
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(Venn.data)
# creating venn diagram for four sets
d <- tibble(value   = c(1,     2,     3,     5,     6,     7,     8,     9),
`Set 1` = c(TRUE,  FALSE, TRUE,  TRUE,  FALSE, TRUE,  FALSE, TRUE),
`Set 2` = c(TRUE,  FALSE, FALSE, TRUE,  FALSE, FALSE, FALSE, TRUE),
`Set 3` = c(TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE),
`Set 4` = c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE))
ggvenn(d, c("Set 1", "Set 2"))
colSums(Venn.data$Wild)
colSums(Venn.data)
Venn.data <- data.frame(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data[Venn.data>0] <- 1
Venn.data[Venn.data == 1] <- TRUE
Venn.data[Venn.data == 0] <- FALSE
View(Venn.data)
Venn.data <- data.frame(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data[Venn.data[,1:2]>0] <- 1
Venn.data[Venn.data[,1:2]>0,] <- 1
Venn.data[,1:2][Venn.data[,1:2]>0] <- 1
Venn.data <- data.frame(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data[,2:3][Venn.data[,2:3]>0] <- 1
Venn.data[,2:3][Venn.data[,2:3] == 1] <- TRUE
Venn.data[,2:3][Venn.data[,2:3] == 0] <- FALSE
Venn.data[,2:3][Venn.data[,2:3] == 1] <- TRUE
Venn.data[,2:3][Venn.data[,2:3] == 0] <- FALSE
# and displaying only two sets
ggvenn(Venn.data)
# and displaying only two sets
ggvenn(t(Venn.data))
upset(Venn.data, order.by = "freq")
Venn.data[,2:3][Venn.data[,2:3] == 0] <- FALSE
# and displaying only two sets
ggvenn(t(Venn.data))
Venn.data[Venn.data$Wild > 0] <- TRUE
Venn.data[Venn.data$Wild > 0]
Venn.data[Venn.data$Wild > 0,]
Venn.data[Venn.data$Wild == 0,]
logical(Venn.data[Venn.data$Wild == 0,])
which(Venn.data[Venn.data$Wild == 0,])
which(Venn.data$Wild[Venn.data$Wild == 0])
Venn.data <- data.frame(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data[,2:3][Venn.data[,2:3]>0] <- TRUE
View(Venn.data)
Venn.data <- data.frame(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
View(Venn.data)
Venn.data[,2:3][Venn.data[,2:3]>0] <- TRUE
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(as.tibble(Venn.data))
Venn.data <- t(Venn.data)
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(as.tibble(Venn.data))
View(Venn.data)
Venn.data <- t(Venn.data)
# creating venn diagram for four sets
# and displaying only two sets
ggvenn(as.tibble(Venn.data))
Venn.data <- tibble(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
# creating venn diagram for four sets
M <-tibble(value=c(1,3,2,7,5),'TEA'=c(TRUE,FALSE,TRUE,FALSE,FALSE),
'COFFEE'=c(TRUE,TRUE,FALSE,FALSE,TRUE),
'JUICE'=c(TRUE,FALSE,FALSE,TRUE,TRUE))
View(M)
Venn.data[,2:3]>0] <- TRUE
Venn.data[,2:3][Venn.data[,2:3]>0] <- TRUE
Venn.data[,2][Venn.data[,2]>0] <- TRUE
Venn.data[,2][Venn.data[,2] == 1] <- TRUE
# and displaying only two sets
ggvenn(M)
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
View(Venn.data)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
# and displaying only two sets
ggvenn(Venn.data)
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("red","orange"))
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("green","red"))
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("forrest green","red"))
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("forrestgreen","red"))
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
View(ARG.INFO)
View(ARGs)
ggvenn(Venn.data,fill_color=c("darkgreen","red")) + theme_bw()
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
View(Venn.data)
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
# creating venn diagram for four sets
pdf("ARG_Venn.pdf", height = 6, width = 8)
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
dev.off()
View(Venn.data)
View(ARGs)
Venn.data <- tibble(ARGs$ARG.ARO.Term,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
Venn.data <- tibble(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("dark","red"))
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("dark green","red"))
# creating venn diagram for four sets
ggvenn(Venn.data) #,fill_color=c("dark green","red"))
Venn.data <- tibble(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
# creating venn diagram for four sets
ggvenn(Venn.data,fill_color=c("dark green","red"))
View(Venn.data)
Venn.data <- tibble(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[Venn.data > 0] <- 1
Venn.data[Venn.data[,2:3] > 0] <- 1
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
View(Venn.data)
Venn.data <- tibble(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
Venn.data <- tibble(rownames(ARGs.tmp),rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
# creating venn diagram for four sets
pdf("ARG_Venn.pdf", height = 6, width = 8)
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
dev.off()
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild == 1, TRUE, FALSE)
Venn.data$Captive <- ifelse(Venn.data$Captive == 1, TRUE, FALSE)
# creating venn diagram for four sets
pdf("ARG_Venn.pdf", height = 6, width = 8)
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
dev.off()
ggvenn(Venn.data,fill_color=c("darkgreen","red"))
View(Venn.data)
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Wild <- ifelse(Venn.data$Wild + Venn.data$Captive == 2, 1, 0)
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Both <- ifelse(Venn.data$Wild + Venn.data$Captive == 2, 1, 0)
sum(Venn.data$Both)
Venn.data %>%
group_by(value) %>%
summarise(n = n(Both))
Venn.data %>%
group_by(value) %>%
summarise(n = n())
Venn.data %>%
group_by(value) %>%
select(Both)
Venn.data %>%
group_by(value) %>%
select(Both) %>%
summarise(n = n())
ggplot(Venn.data, aes(x = value, y = Both))
ggplot(Venn.data, aes(x = value, y = Both)) + geom_bar
ggplot(Venn.data, aes(x = value, y = Both)) + geom_bar(stat = "identity")
ggplot(Venn.data, aes(x = reorder(value, Both), y = Both)) + geom_bar(stat = "identity")
Venn.data <- Venn.data[Venn.data$Both > 0,]
ggplot(Venn.data, aes(x = reorder(value, Both), y = Both)) + geom_bar(stat = "identity") +
ggplot(Venn.data, aes(x = reorder(value, Both), y = Both)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(Venn.data)
ggplot(Venn.data, aes(x = reorder(value, Both), y = Both)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Venn.data <- Venn.data[Venn.data$Both > 10,]
ggplot(Venn.data, aes(x = reorder(value, Both), y = Both)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Both <- ifelse(Venn.data$Wild + Venn.data$Captive == 2, 1, 0)
Venn.data <- Venn.data[Venn.data$Both > 1,]
View(Venn.data)
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Both <- ifelse(Venn.data$Wild + Venn.data$Captive == 2, 1, 0)
Venn.data <- Venn.data[Venn.data$Both > 1,]
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Both <- ifelse(Venn.data$Wild + Venn.data$Captive == 2, 1, 0)
Venn.data <- Venn.data[Venn.data$Both > 0,]
Venn.data <- tibble(ARGs$ARG.Drug.Class,rowSums(ARGs.tmp[,1:7]),
ARGs.tmp[,8])
Venn.data[,2:3][Venn.data[,2:3] > 0] <- 1
colnames(Venn.data) <- c("value","Wild","Captive")
Venn.data$Both <- ifelse(Venn.data$Wild + Venn.data$Captive == 2, 1, 0)
View(Venn.data)
Venn.data <- Venn.data[Venn.data$Both > 0,]
View(Venn.data)
table(Venn.data$Both)
table(Venn.data$value)
Venn.data$Clean_class <- gsub("\\..*","",Venn.data$value)
View(Venn.data)
Venn.data$Clean_class <- gsub("\\.;*","",Venn.data$value)
View(Venn.data)
Venn.data$Clean_class <- gsub(";*","",Venn.data$value)
View(Venn.data)
Venn.data$Clean_class <- gsub(";.*","",Venn.data$value)
View(Venn.data)
table(Venn.data$Clean_class)
ggplot(Venn.data, aes(x = Clean_class, y = Both)) + geom_bar(stat = "identity")
ggplot(Venn.data, aes(x = reorder(Clean_class, Both), y = Both)) + geom_bar(stat = "identity")
ggplot(Venn.data, aes(x = reorder(Clean_class, Both), y = Both)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(Venn.data, aes(x = reorder(Clean_class, Both), y = Both)) + geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + theme_minimal()
ggplot(Venn.data, aes(x = reorder(Clean_class, Both), y = Both)) + geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(Venn.data, aes(x = reorder(Clean_class, Both), y = Both)) + geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("No. shared ARGs") + xlab("ARG Class")
test <- table(Venn.data$Clean_class)
test
test <- as.data.frame(table(Venn.data$Clean_class))
View(test)
ARG.table <- as.data.frame(table(Venn.data$Clean_class))
View(ARG.table)
ggplot(ARG.table, aes(x = reorder(Var1, Freq), y = Freq)) + geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("No. shared ARGs") + xlab("ARG Class")
ggplot(ARG.table, aes(x = reorder(Var1, -Freq), y = Freq)) + geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("No. shared ARGs") + xlab("ARG Class")
ARG.table <- as.data.frame(table(Venn.data$Clean_class))
pdf("No_shared_ARGs.pdf", height = 6, width = 10)
ggplot(ARG.table, aes(x = reorder(Var1, -Freq), y = Freq)) + geom_bar(stat = "identity") + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab("No. shared ARGs") + xlab("ARG Class")
dev.off()
